// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/executor/funcmanager/getter.go

// Package mock is a generated GoMock package.
package mock

import (
	funcmanager "Color-FaaS-Core/pkg/executor/env"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetter is a mock of Getter interface.
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter.
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance.
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockGetter) DownloadFile(instance funcmanager.FunctionInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockGetterMockRecorder) DownloadFile(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockGetter)(nil).DownloadFile), instance)
}
